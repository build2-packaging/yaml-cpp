intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}

# Public headers.
#
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

lib{yaml-cpp}: $pub/{$pub_hdrs}

# Private headers and sources as well as dependencies.
#
lib{yaml-cpp}: {hxx ixx txx cxx}{**} $impl_libs $intf_libs

# Build options.
#
out_pfx_inc = [dir_path] $out_root/yaml-cpp/include/
src_pfx_inc = [dir_path] $src_root/yaml-cpp/include/
out_pfx_src = [dir_path] $out_root/yaml-cpp/src/
src_pfx_src = [dir_path] $src_root/yaml-cpp/src/

cxx.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc"

{hbmia obja}{*}: cxx.poptions += -DYAML_CPP_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DYAML_CPP_SHARED_BUILD

if ($c.target.class == 'windows')
{
  {hbmis objs}{*}: cxx.poptions += -DYAML_CPP_DLL -Dyaml_cpp_EXPORTS
}

# Export options.
#
lib{yaml-cpp}:
{
  cxx.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  cxx.export.libs = $intf_libs
}

liba{yaml-cpp}: cxx.export.poptions += -DYAML_CPP_STATIC
libs{yaml-cpp}: cxx.export.poptions += -DYAML_CPP_SHARED

if ($c.target.class == 'windows')
{
  libs{yaml-cpp}: cxx.export.poptions += -DYAML_CPP_DLL -Dyaml_cpp_EXPORTS
}
# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{yaml-cpp}: bin.lib.version = "-$version.project_id"
else
  lib{yaml-cpp}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
{hxx ixx txx}{*}: install = false
